// Code generated by MockGen. DO NOT EDIT.
// Source: externalApis.go

// Package registrationService is a generated GoMock package.
package registrationService

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPatientStorer is a mock of PatientStorer interface.
type MockPatientStorer struct {
	ctrl     *gomock.Controller
	recorder *MockPatientStorerMockRecorder
}

// MockPatientStorerMockRecorder is the mock recorder for MockPatientStorer.
type MockPatientStorerMockRecorder struct {
	mock *MockPatientStorer
}

// NewMockPatientStorer creates a new mock instance.
func NewMockPatientStorer(ctrl *gomock.Controller) *MockPatientStorer {
	mock := &MockPatientStorer{ctrl: ctrl}
	mock.recorder = &MockPatientStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientStorer) EXPECT() *MockPatientStorerMockRecorder {
	return m.recorder
}

// GetPatientOnUid mocks base method.
func (m *MockPatientStorer) GetPatientOnUid() (Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientOnUid")
	ret0, _ := ret[0].(Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientOnUid indicates an expected call of GetPatientOnUid.
func (mr *MockPatientStorerMockRecorder) GetPatientOnUid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientOnUid", reflect.TypeOf((*MockPatientStorer)(nil).GetPatientOnUid))
}

// PutPatientOnUid mocks base method.
func (m *MockPatientStorer) PutPatientOnUid(patient Patient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPatientOnUid", patient)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutPatientOnUid indicates an expected call of PutPatientOnUid.
func (mr *MockPatientStorerMockRecorder) PutPatientOnUid(patient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPatientOnUid", reflect.TypeOf((*MockPatientStorer)(nil).PutPatientOnUid), patient)
}

// MockPincodeGenerator is a mock of PincodeGenerator interface.
type MockPincodeGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockPincodeGeneratorMockRecorder
}

// MockPincodeGeneratorMockRecorder is the mock recorder for MockPincodeGenerator.
type MockPincodeGeneratorMockRecorder struct {
	mock *MockPincodeGenerator
}

// NewMockPincodeGenerator creates a new mock instance.
func NewMockPincodeGenerator(ctrl *gomock.Controller) *MockPincodeGenerator {
	mock := &MockPincodeGenerator{ctrl: ctrl}
	mock.recorder = &MockPincodeGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPincodeGenerator) EXPECT() *MockPincodeGeneratorMockRecorder {
	return m.recorder
}

// GenerateRandomPin mocks base method.
func (m *MockPincodeGenerator) GenerateRandomPin() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomPin")
	ret0, _ := ret[0].(int)
	return ret0
}

// GenerateRandomPin indicates an expected call of GenerateRandomPin.
func (mr *MockPincodeGeneratorMockRecorder) GenerateRandomPin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomPin", reflect.TypeOf((*MockPincodeGenerator)(nil).GenerateRandomPin))
}

// MockSmsSender is a mock of SmsSender interface.
type MockSmsSender struct {
	ctrl     *gomock.Controller
	recorder *MockSmsSenderMockRecorder
}

// MockSmsSenderMockRecorder is the mock recorder for MockSmsSender.
type MockSmsSenderMockRecorder struct {
	mock *MockSmsSender
}

// NewMockSmsSender creates a new mock instance.
func NewMockSmsSender(ctrl *gomock.Controller) *MockSmsSender {
	mock := &MockSmsSender{ctrl: ctrl}
	mock.recorder = &MockSmsSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmsSender) EXPECT() *MockSmsSenderMockRecorder {
	return m.recorder
}

// SendSms mocks base method.
func (m *MockSmsSender) SendSms(phoneNumber, smsContent string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSms", phoneNumber, smsContent)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSms indicates an expected call of SendSms.
func (mr *MockSmsSenderMockRecorder) SendSms(phoneNumber, smsContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSms", reflect.TypeOf((*MockSmsSender)(nil).SendSms), phoneNumber, smsContent)
}
