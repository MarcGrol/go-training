// Code generated by MockGen. DO NOT EDIT.
// Source: appointmentStore.go

// Package appointmentstore is a generated GoMock package.
package appointmentstore

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAppointmentStore is a mock of AppointmentStore interface
type MockAppointmentStore struct {
	ctrl     *gomock.Controller
	recorder *MockAppointmentStoreMockRecorder
}

// MockAppointmentStoreMockRecorder is the mock recorder for MockAppointmentStore
type MockAppointmentStoreMockRecorder struct {
	mock *MockAppointmentStore
}

// NewMockAppointmentStore creates a new mock instance
func NewMockAppointmentStore(ctrl *gomock.Controller) *MockAppointmentStore {
	mock := &MockAppointmentStore{ctrl: ctrl}
	mock.recorder = &MockAppointmentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppointmentStore) EXPECT() *MockAppointmentStoreMockRecorder {
	return m.recorder
}

// PutAppointment mocks base method
func (m *MockAppointmentStore) PutAppointment(appointment Appointment) (Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAppointment", appointment)
	ret0, _ := ret[0].(Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAppointment indicates an expected call of PutAppointment
func (mr *MockAppointmentStoreMockRecorder) PutAppointment(appointment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppointment", reflect.TypeOf((*MockAppointmentStore)(nil).PutAppointment), appointment)
}

// GetAppointmentOnUid mocks base method
func (m *MockAppointmentStore) GetAppointmentOnUid(appointmentUID string) (Appointment, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointmentOnUid", appointmentUID)
	ret0, _ := ret[0].(Appointment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppointmentOnUid indicates an expected call of GetAppointmentOnUid
func (mr *MockAppointmentStoreMockRecorder) GetAppointmentOnUid(appointmentUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointmentOnUid", reflect.TypeOf((*MockAppointmentStore)(nil).GetAppointmentOnUid), appointmentUID)
}

// GetAppointmentsOnUserUid mocks base method
func (m *MockAppointmentStore) GetAppointmentsOnUserUid(userUID string) ([]Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointmentsOnUserUid", userUID)
	ret0, _ := ret[0].([]Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppointmentsOnUserUid indicates an expected call of GetAppointmentsOnUserUid
func (mr *MockAppointmentStoreMockRecorder) GetAppointmentsOnUserUid(userUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointmentsOnUserUid", reflect.TypeOf((*MockAppointmentStore)(nil).GetAppointmentsOnUserUid), userUID)
}

// GetAppointmentsOnStatus mocks base method
func (m *MockAppointmentStore) GetAppointmentsOnStatus(status AppointmentStatus) ([]Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointmentsOnStatus", status)
	ret0, _ := ret[0].([]Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppointmentsOnStatus indicates an expected call of GetAppointmentsOnStatus
func (mr *MockAppointmentStoreMockRecorder) GetAppointmentsOnStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointmentsOnStatus", reflect.TypeOf((*MockAppointmentStore)(nil).GetAppointmentsOnStatus), status)
}
