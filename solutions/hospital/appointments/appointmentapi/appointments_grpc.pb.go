// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package appointmentapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppointmentInternalClient is the client API for AppointmentInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppointmentInternalClient interface {
	GetAppointmentsOnStatus(ctx context.Context, in *GetAppointmentsOnStatusRequest, opts ...grpc.CallOption) (*GetAppointmentsReply, error)
	ModifyAppointmentStatus(ctx context.Context, in *ModifyAppointmentStatusRequest, opts ...grpc.CallOption) (*AppointmentReply, error)
}

type appointmentInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewAppointmentInternalClient(cc grpc.ClientConnInterface) AppointmentInternalClient {
	return &appointmentInternalClient{cc}
}

func (c *appointmentInternalClient) GetAppointmentsOnStatus(ctx context.Context, in *GetAppointmentsOnStatusRequest, opts ...grpc.CallOption) (*GetAppointmentsReply, error) {
	out := new(GetAppointmentsReply)
	err := c.cc.Invoke(ctx, "/appointmentapi.AppointmentInternal/GetAppointmentsOnStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentInternalClient) ModifyAppointmentStatus(ctx context.Context, in *ModifyAppointmentStatusRequest, opts ...grpc.CallOption) (*AppointmentReply, error) {
	out := new(AppointmentReply)
	err := c.cc.Invoke(ctx, "/appointmentapi.AppointmentInternal/ModifyAppointmentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppointmentInternalServer is the server API for AppointmentInternal service.
// All implementations must embed UnimplementedAppointmentInternalServer
// for forward compatibility
type AppointmentInternalServer interface {
	GetAppointmentsOnStatus(context.Context, *GetAppointmentsOnStatusRequest) (*GetAppointmentsReply, error)
	ModifyAppointmentStatus(context.Context, *ModifyAppointmentStatusRequest) (*AppointmentReply, error)
	mustEmbedUnimplementedAppointmentInternalServer()
}

// UnimplementedAppointmentInternalServer must be embedded to have forward compatible implementations.
type UnimplementedAppointmentInternalServer struct {
}

func (UnimplementedAppointmentInternalServer) GetAppointmentsOnStatus(context.Context, *GetAppointmentsOnStatusRequest) (*GetAppointmentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentsOnStatus not implemented")
}
func (UnimplementedAppointmentInternalServer) ModifyAppointmentStatus(context.Context, *ModifyAppointmentStatusRequest) (*AppointmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyAppointmentStatus not implemented")
}
func (UnimplementedAppointmentInternalServer) mustEmbedUnimplementedAppointmentInternalServer() {}

// UnsafeAppointmentInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppointmentInternalServer will
// result in compilation errors.
type UnsafeAppointmentInternalServer interface {
	mustEmbedUnimplementedAppointmentInternalServer()
}

func RegisterAppointmentInternalServer(s grpc.ServiceRegistrar, srv AppointmentInternalServer) {
	s.RegisterService(&AppointmentInternal_ServiceDesc, srv)
}

func _AppointmentInternal_GetAppointmentsOnStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentsOnStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentInternalServer).GetAppointmentsOnStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointmentapi.AppointmentInternal/GetAppointmentsOnStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentInternalServer).GetAppointmentsOnStatus(ctx, req.(*GetAppointmentsOnStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentInternal_ModifyAppointmentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyAppointmentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentInternalServer).ModifyAppointmentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointmentapi.AppointmentInternal/ModifyAppointmentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentInternalServer).ModifyAppointmentStatus(ctx, req.(*ModifyAppointmentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppointmentInternal_ServiceDesc is the grpc.ServiceDesc for AppointmentInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppointmentInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appointmentapi.AppointmentInternal",
	HandlerType: (*AppointmentInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppointmentsOnStatus",
			Handler:    _AppointmentInternal_GetAppointmentsOnStatus_Handler,
		},
		{
			MethodName: "ModifyAppointmentStatus",
			Handler:    _AppointmentInternal_ModifyAppointmentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appointments.proto",
}

// AppointmentExternalClient is the client API for AppointmentExternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppointmentExternalClient interface {
	GetAppointmentsOnUser(ctx context.Context, in *GetAppointmentsOnUserRequest, opts ...grpc.CallOption) (*GetAppointmentsReply, error)
	RequestAppointment(ctx context.Context, in *RequestAppointmentRequest, opts ...grpc.CallOption) (*AppointmentReply, error)
}

type appointmentExternalClient struct {
	cc grpc.ClientConnInterface
}

func NewAppointmentExternalClient(cc grpc.ClientConnInterface) AppointmentExternalClient {
	return &appointmentExternalClient{cc}
}

func (c *appointmentExternalClient) GetAppointmentsOnUser(ctx context.Context, in *GetAppointmentsOnUserRequest, opts ...grpc.CallOption) (*GetAppointmentsReply, error) {
	out := new(GetAppointmentsReply)
	err := c.cc.Invoke(ctx, "/appointmentapi.AppointmentExternal/GetAppointmentsOnUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentExternalClient) RequestAppointment(ctx context.Context, in *RequestAppointmentRequest, opts ...grpc.CallOption) (*AppointmentReply, error) {
	out := new(AppointmentReply)
	err := c.cc.Invoke(ctx, "/appointmentapi.AppointmentExternal/RequestAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppointmentExternalServer is the server API for AppointmentExternal service.
// All implementations must embed UnimplementedAppointmentExternalServer
// for forward compatibility
type AppointmentExternalServer interface {
	GetAppointmentsOnUser(context.Context, *GetAppointmentsOnUserRequest) (*GetAppointmentsReply, error)
	RequestAppointment(context.Context, *RequestAppointmentRequest) (*AppointmentReply, error)
	mustEmbedUnimplementedAppointmentExternalServer()
}

// UnimplementedAppointmentExternalServer must be embedded to have forward compatible implementations.
type UnimplementedAppointmentExternalServer struct {
}

func (UnimplementedAppointmentExternalServer) GetAppointmentsOnUser(context.Context, *GetAppointmentsOnUserRequest) (*GetAppointmentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentsOnUser not implemented")
}
func (UnimplementedAppointmentExternalServer) RequestAppointment(context.Context, *RequestAppointmentRequest) (*AppointmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAppointment not implemented")
}
func (UnimplementedAppointmentExternalServer) mustEmbedUnimplementedAppointmentExternalServer() {}

// UnsafeAppointmentExternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppointmentExternalServer will
// result in compilation errors.
type UnsafeAppointmentExternalServer interface {
	mustEmbedUnimplementedAppointmentExternalServer()
}

func RegisterAppointmentExternalServer(s grpc.ServiceRegistrar, srv AppointmentExternalServer) {
	s.RegisterService(&AppointmentExternal_ServiceDesc, srv)
}

func _AppointmentExternal_GetAppointmentsOnUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentsOnUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentExternalServer).GetAppointmentsOnUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointmentapi.AppointmentExternal/GetAppointmentsOnUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentExternalServer).GetAppointmentsOnUser(ctx, req.(*GetAppointmentsOnUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentExternal_RequestAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentExternalServer).RequestAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointmentapi.AppointmentExternal/RequestAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentExternalServer).RequestAppointment(ctx, req.(*RequestAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppointmentExternal_ServiceDesc is the grpc.ServiceDesc for AppointmentExternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppointmentExternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appointmentapi.AppointmentExternal",
	HandlerType: (*AppointmentExternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppointmentsOnUser",
			Handler:    _AppointmentExternal_GetAppointmentsOnUser_Handler,
		},
		{
			MethodName: "RequestAppointment",
			Handler:    _AppointmentExternal_RequestAppointment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appointments.proto",
}
