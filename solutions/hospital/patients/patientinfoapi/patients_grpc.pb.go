// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package patientinfoapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PatientInfoClient is the client API for PatientInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PatientInfoClient interface {
	GetPatientOnUid(ctx context.Context, in *GetPatientOnUidRequest, opts ...grpc.CallOption) (*GetPatientOnUidReply, error)
}

type patientInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewPatientInfoClient(cc grpc.ClientConnInterface) PatientInfoClient {
	return &patientInfoClient{cc}
}

func (c *patientInfoClient) GetPatientOnUid(ctx context.Context, in *GetPatientOnUidRequest, opts ...grpc.CallOption) (*GetPatientOnUidReply, error) {
	out := new(GetPatientOnUidReply)
	err := c.cc.Invoke(ctx, "/patientinfoapi.PatientInfo/GetPatientOnUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientInfoServer is the server API for PatientInfo service.
// All implementations must embed UnimplementedPatientInfoServer
// for forward compatibility
type PatientInfoServer interface {
	GetPatientOnUid(context.Context, *GetPatientOnUidRequest) (*GetPatientOnUidReply, error)
	mustEmbedUnimplementedPatientInfoServer()
}

// UnimplementedPatientInfoServer must be embedded to have forward compatible implementations.
type UnimplementedPatientInfoServer struct {
}

func (UnimplementedPatientInfoServer) GetPatientOnUid(context.Context, *GetPatientOnUidRequest) (*GetPatientOnUidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientOnUid not implemented")
}
func (UnimplementedPatientInfoServer) mustEmbedUnimplementedPatientInfoServer() {}

// UnsafePatientInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatientInfoServer will
// result in compilation errors.
type UnsafePatientInfoServer interface {
	mustEmbedUnimplementedPatientInfoServer()
}

func RegisterPatientInfoServer(s grpc.ServiceRegistrar, srv PatientInfoServer) {
	s.RegisterService(&PatientInfo_ServiceDesc, srv)
}

func _PatientInfo_GetPatientOnUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientOnUidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientInfoServer).GetPatientOnUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/patientinfoapi.PatientInfo/GetPatientOnUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientInfoServer).GetPatientOnUid(ctx, req.(*GetPatientOnUidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PatientInfo_ServiceDesc is the grpc.ServiceDesc for PatientInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PatientInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "patientinfoapi.PatientInfo",
	HandlerType: (*PatientInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPatientOnUid",
			Handler:    _PatientInfo_GetPatientOnUid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "patients.proto",
}
