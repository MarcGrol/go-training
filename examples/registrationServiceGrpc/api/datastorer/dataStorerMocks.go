// Code generated by MockGen. DO NOT EDIT.
// Source: dataStorer.go

// Package datastorer is a generated GoMock package.
package datastorer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPatientStorer is a mock of PatientStorer interface.
type MockPatientStorer struct {
	ctrl     *gomock.Controller
	recorder *MockPatientStorerMockRecorder
}

// MockPatientStorerMockRecorder is the mock recorder for MockPatientStorer.
type MockPatientStorerMockRecorder struct {
	mock *MockPatientStorer
}

// NewMockPatientStorer creates a new mock instance.
func NewMockPatientStorer(ctrl *gomock.Controller) *MockPatientStorer {
	mock := &MockPatientStorer{ctrl: ctrl}
	mock.recorder = &MockPatientStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientStorer) EXPECT() *MockPatientStorerMockRecorder {
	return m.recorder
}

// GetPatientOnUid mocks base method.
func (m *MockPatientStorer) GetPatientOnUid(uid string) (Patient, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientOnUid", uid)
	ret0, _ := ret[0].(Patient)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPatientOnUid indicates an expected call of GetPatientOnUid.
func (mr *MockPatientStorerMockRecorder) GetPatientOnUid(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientOnUid", reflect.TypeOf((*MockPatientStorer)(nil).GetPatientOnUid), uid)
}

// PutPatientOnUid mocks base method.
func (m *MockPatientStorer) PutPatientOnUid(patient Patient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPatientOnUid", patient)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutPatientOnUid indicates an expected call of PutPatientOnUid.
func (mr *MockPatientStorerMockRecorder) PutPatientOnUid(patient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPatientOnUid", reflect.TypeOf((*MockPatientStorer)(nil).PutPatientOnUid), patient)
}
